{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Dragger","Upload","App","useState","tableHeader","setTableHeader","tableData","setTableData","data","setData","allMatch","setAllMatch","useEffect","isValid","res","item","validate","console","log","className","name","beforeUpload","onChange","file","fileReader","FileReader","onload","event","result","target","workbook","XLSX","type","sheet","Sheets","hasOwnProperty","concat","sheet_to_json","message","success","e","error","dataSource","columns","Object","keys","splice","map","index","title","dataIndex","key","push","render","text","record","toString","__EMPTY","__EMPTY_1","equl","slice","readAsBinaryString","showUploadList","onClick","dataTable","option","fileName","datas","sheetData","sheetName","sheetFilter","sheetHeader","ExportJsonExcel","saveExcel","style","marginBottom","pagination","pageSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb46b51e.chunk.js","sourcesContent":["import * as XLSX from \"xlsx\";\nimport { Button, message, Table, Upload } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport ExportJsonExcel from 'js-export-excel';\n\nimport \"./App.css\";\n\nconst Dragger = Upload.Dragger;\n\nfunction App() {\n  const [tableHeader, setTableHeader] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [data, setData] = useState([]);\n  const [allMatch, setAllMatch] = useState(true);\n\n  const validate = () => {\n    let res = true;\n    for (let item of tableData) {\n      if (item[\"__EMPTY\"] != item[\"__EMPTY_1\"]) {\n        res = false;\n      }\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    const isValid = validate();\n    console.log(isValid, 'val')\n    setAllMatch(isValid);\n  }, [tableData]);\n\n  const uploadFilesChange = (file) => {\n    // 通过FileReader对象读取文件\n    const fileReader = new FileReader();\n    fileReader.onload = (event) => {\n      try {\n        const { result } = event.target;\n        // 以二进制流方式读取得到整份excel表格对象\n        const workbook = XLSX.read(result, { type: \"binary\" });\n        // 存储获取到的数据\n        let data = [];\n        // 遍历每张工作表进行读取（这里默认只读取第一张表）\n        for (const sheet in workbook.Sheets) {\n          let tempData = [];\n          if (workbook.Sheets.hasOwnProperty(sheet)) {\n            // 利用 sheet_to_json 方法将 excel 转成 json 数据\n            data = tempData.concat(\n              XLSX.utils.sheet_to_json(workbook.Sheets[sheet])\n            );\n            setData(data);\n          }\n        }\n        //上传成功啦,data为上传后的数据\n        // 最终获取到并且格式化后的 json 数据\n        message.success(\"上传成功！\");\n      } catch (e) {\n        // 这里可以抛出文件类型错误不正确的相关提示\n        message.error(\"文件类型不正确！\");\n      }\n      console.log(data);\n      let columns = [];\n      let dataSource = [];\n      // 处理表头\n      let keys = data[0] ? Object.keys(data[0]).splice(0, 2) : [];\n      columns = keys.map((item, index) => {\n        return {\n          title: data[0][item],\n          dataIndex: item,\n          key: item,\n        };\n      });\n      columns.push({\n        title: \"是否相等\",\n        key: \"equl\",\n        render: (text, record) => (\n          <span>{text[\"__EMPTY\"] == text[\"__EMPTY_1\"] ? \"是\" : \"否\"}</span>\n        ),\n      });\n      dataSource = data\n        .map((item, index) => {\n          return {\n            key: index.toString(),\n            __EMPTY: item[\"__EMPTY\"],\n            __EMPTY_1: item[\"__EMPTY_1\"],\n            equl: item[\"__EMPTY\"] == item[\"__EMPTY_1\"]\n          };\n        })\n        .slice(1);\n\n      setTableData(dataSource);\n      setTableHeader(columns);\n    };\n    // 以二进制方式打开文件\n    fileReader.readAsBinaryString(file.file);\n  };\n\n  const downloadFileToExcel = () => {\n    let dataTable = [];  //excel文件中的数据内容\n    let option = {};  //option代表的就是excel文件\n    dataTable  = tableData;  //从props中获取数据源\n    option.fileName = '下载文档';  //excel文件名称\n    option.datas = [\n        {\n            sheetData: dataTable,  //excel文件中的数据源\n            sheetName: '1',  //excel文件中sheet页名称\n            sheetFilter: ['__EMPTY', '__EMPTY_1', 'equl'],  //excel文件中需显示的列数据\n            sheetHeader: ['__EMPTY', '__EMPTY_1', 'equl'], //excel文件中每列的表头名称\n        }\n    ]\n    let toExcel = new ExportJsonExcel(option);  //生成excel文件\n    toExcel.saveExcel();  //下载excel文件\n}\n\n  return (\n    <div className=\"App\">\n      是否完全相同？ {allMatch ? \"是\" : \"否\"}\n      <Dragger\n        name=\"file\"\n        beforeUpload={function () {\n          return false;\n        }}\n        onChange={uploadFilesChange}\n        showUploadList={false}\n      >\n        <p className=\"ant-upload-text\">\n          <span>点击上传文件</span>\n          或者拖拽上传\n        </p>\n      </Dragger>\n      <Button\n        type=\"primary\"\n        onClick={downloadFileToExcel}\n        style={{ marginBottom: \"15px\" }}\n      >\n        下载\n      </Button>\n      <Table\n        columns={tableHeader}\n        dataSource={tableData}\n        pagination={{\n          pageSize: 5000,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}